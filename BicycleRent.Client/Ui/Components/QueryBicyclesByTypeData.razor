@inject IBicycleRentApiWrapper BicycleRentApi

<Modal @ref="bicyclesByTypeModal">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Bicycles by Type</ModalTitle>
            <CloseButton Clicked="CloseModalAsync" />
        </ModalHeader>
        <ModalBody>
            <Field>
                <Select TValue="int" @bind-Value="selectedTypeId" @onchange="OnTypeChanged">
                    <SelectItem Value="0">Select a bicycle type...</SelectItem>
                    @foreach (var type in bicycleTypes)
                    {
                        <SelectItem Value="@type.Id">@type.TypeName</SelectItem>
                    }
                </Select>
            </Field>

            @if (isLoading)
            {
                <div>Loading...</div>
            }
            else if (bicyclesByType.Any())
            {
                <DataGrid TItem="BicycleWithTypeNameDto"
                          Data="@bicyclesByType"
                          Responsive
                          Striped>
                    <DataGridColumns>
                        <DataGridColumn TItem="BicycleWithTypeNameDto"
                                        Field="@nameof(BicycleWithTypeNameDto.SerialNumber)"
                                        Caption="Serial Number" />
                        <DataGridColumn TItem="BicycleWithTypeNameDto"
                                        Field="@nameof(BicycleWithTypeNameDto.Model)"
                                        Caption="Model" />
                        <DataGridColumn TItem="BicycleWithTypeNameDto"
                                        Field="@nameof(BicycleWithTypeNameDto.Color)"
                                        Caption="Color" />
                        <DataGridColumn TItem="BicycleWithTypeNameDto"
                                        Field="@nameof(BicycleWithTypeNameDto.TypeName)"
                                        Caption="Type" />
                    </DataGridColumns>
                </DataGrid>
            }
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Primary" Clicked="LoadBicyclesByType">Search</Button>
            <Button Color="Color.Secondary" Clicked="CloseModalAsync">Close</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    private Modal bicyclesByTypeModal { get; set; } = new();
    private ICollection<BicycleTypeDto> bicycleTypes { get; set; } = [];
    private ICollection<BicycleWithTypeNameDto> bicyclesByType { get; set; } = []; 
    private int selectedTypeId { get; set; } = 0;
    private bool isLoading { get; set; } = false;

    public async Task Show()
    {
        await LoadBicycleTypes(); 
        await bicyclesByTypeModal.Show();
    }

    private async Task LoadBicycleTypes()
    {
        try
        {
            bicycleTypes = await BicycleRentApi.GetAllBicycleTypes();
            if (bicycleTypes.Any())
            {
                selectedTypeId = 0;
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading types: {ex.Message}");
        }
    }

    private void OnTypeChanged(ChangeEventArgs e)
    {
        if (e.Value != null && int.TryParse(e.Value.ToString(), out var result))
        {
            selectedTypeId = result;
        }
        else
        {
            selectedTypeId = 0; 
        }
    }

    private async Task LoadBicyclesByType()
    {
        if (selectedTypeId > 0)
        {
            try
            {
                isLoading = true;
                StateHasChanged();
                bicyclesByType = await BicycleRentApi.GetBicyclesByType(selectedTypeId);
                isLoading = false;
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading bicycles by type: {ex.Message}");
                isLoading = false;
            }
        }
        else
        {
            Console.WriteLine("No type selected");
        }
    }
    private async Task CloseModalAsync() => await bicyclesByTypeModal.Hide();
}

