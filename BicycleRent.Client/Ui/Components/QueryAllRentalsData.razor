@inject IBicycleRentApiWrapper BicycleRentApi

<button class="btn btn-primary mb-3" @onclick="ToggleRentalList">
    @(showRentals ? "Hide Rentals" : "Show Rentals")
</button>

@if (showRentals)
{
    @if (rentals == null)
    {
        <p>Loading rentals...</p>
    }
    else if (rentals.Count == 0)
    {
        <p>No rentals available</p>
    }
    else
    {
        <table class="table table-bordered table-hover table-responsive">
            <thead class="thead-dark">
                <tr>
                    <th>
                        ID
                        <button class="btn btn-sm btn-light" @onclick="ToggleSortOrder">
                            @(sortAscending ? "▲" : "▼")
                        </button>
                    </th>
                    <th>Bicycle Serial Number</th>
                    <th>Customer ID</th>
                    <th>Begin</th>
                    <th>End</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var rental in rentals)
                {
                    <tr>
                        <td>@rental.Id</td>
                        <td>@rental.BicycleSerialNumber</td>
                        <td>@rental.CustomerId</td>
                        <td>@rental.Begin.ToString("g")</td>
                        <td>@rental.End.ToString("g")</td>
                    </tr>
                }
            </tbody>
        </table>
    }
    
}

@code {
    private bool showRentals = false; 
    private bool sortAscending = true;
    private ICollection<RentalDto>? rentals;

    private async Task ToggleRentalList()
    {
        showRentals = !showRentals;

        if (showRentals && rentals == null)
        {
            try
            {
                rentals = await BicycleRentApi.GetAllRentals();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error fetching rentals: {ex.Message}");
                rentals = new List<RentalDto>();
            }
        }
    }

    private void ToggleSortOrder()
    {
        if (rentals == null) return;
        if (sortAscending)
        {
            rentals = rentals.OrderByDescending(r => r.Id).ToList();
        }
        else
        {
            rentals = rentals.OrderBy(r => r.Id).ToList();
        }
        sortAscending = !sortAscending; 
    }
}
