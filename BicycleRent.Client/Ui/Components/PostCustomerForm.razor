@inject IBicycleRentApiWrapper BicycleRentApi

<EditForm Model="@сustomer" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />  
    
    <div class="form-group">
        <label for="FullName">Full Name</label>
        <InputText id="FullName" class="form-control" @bind-Value="сustomer.FullName" />
    </div>

    <div class="form-group">
        <label for="BirthDate">Birth Date</label>
        <InputDate id="BirthDate" class="form-control" @bind-Value="сustomer.BirthDate" />
    </div>

    <div class="form-group">
        <label for="PhoneNumber">Phone Number</label>
        <InputText id="PhoneNumber" class="form-control" @bind-Value="сustomer.PhoneNumber" />
    </div>

    <button type="submit" class="btn btn-outline-light bg-primary mt-3" style="width: 180px;">Submit</button>
    
    @if (message is not null)
    {
        <div class="alert alert-info mt-3">@message</div>
    }
</EditForm>

@code {
    [Parameter] public EventCallback<CustomerDto> OnCustomerAdded { get; set; }

    private CustomerDto сustomer = new()
        {
            Id = 0,
            FullName = string.Empty,
            BirthDate = DateTime.Now,
            PhoneNumber = string.Empty
        };

    private string? message;

    private async Task HandleValidSubmit()
    {
        try
        {
            message = null;
            var result = await BicycleRentApi.PostCustomer(сustomer);
            message = $"Customer '{result.FullName}' added successfully with ID {result.Id}.";
            сustomer = new CustomerDto
                {
                    Id = 0,
                    FullName = string.Empty,
                    BirthDate = DateTime.Now,
                    PhoneNumber = string.Empty
                };
        }
        catch (ApiException ex)
        {
            if (ex.StatusCode == 409)
            {
                message = $"Conflict error: {ex.Message}";
            }
            else
            {
                message = $"{ex.Message}";
            }
        }
    }
}
